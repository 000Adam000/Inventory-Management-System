/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package warehouse;

import backend.Users;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 *
 * @author DotNet
 */
public class ManageUsers extends javax.swing.JInternalFrame {
    
    private Users usersManager;
    
    private SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd");
    private SimpleDateFormat displayDateFormatter = new SimpleDateFormat("dd/MM/yyyy");
    

    /**
     * Creates new form ManageUsers
     */
    public ManageUsers() {
        // Initialize the UI components (generated by NetBeans form editor)
        initComponents();
        
        // Create our database manager - this handles all database operations
        usersManager = new Users();
        
        // Load initial data into the table
        showData();
        
        // Group radio buttons so only one can be selected at a time
        buttonGroup1.add(mRadioButton);
        buttonGroup1.add(fmRadioButton);
        
        // Add mouse listener to handle table row selection
        // This allows users to click on a table row to populate the form fields
        table.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                handleTableClick();
            }
        });
    }
    
    private void handleTableClick() {
        // Get the table model so we can access the data
        DefaultTableModel dtm = (DefaultTableModel) table.getModel();
        int selectedRow = table.getSelectedRow();
        
        // Make sure a row is actually selected
        if (selectedRow == -1) {
            return; // No row selected, nothing to do
        }

        try {
            // Populate form fields with data from the selected row
            // Note: We're using toString() to safely convert table values to strings
            
            // Column 1 = Name
            nameField.setText(getTableValueAsString(dtm, selectedRow, 1));
            
            // Column 2 = Username  
            usernameField.setText(getTableValueAsString(dtm, selectedRow, 2));

            // Column 3 = Birthdate - needs special handling for date parsing
            String birthdateStr = getTableValueAsString(dtm, selectedRow, 3);
            try {
                // Try to parse the date and set it in the date chooser
                Date birthdate = dateFormatter.parse(birthdateStr);
                DateChooser.setDate(birthdate);
            } catch (ParseException e) {
                // If date parsing fails, clear the date chooser
                DateChooser.setDate(null);
                System.out.println("Could not parse birthdate: " + birthdateStr);
            }

            // Column 4 = Mobile Number
            numberField.setText(getTableValueAsString(dtm, selectedRow, 4));
            
            // Column 5 = Email
            emailField.setText(getTableValueAsString(dtm, selectedRow, 5));
            
            // Column 6 = Gender - set the appropriate radio button
            String gender = getTableValueAsString(dtm, selectedRow, 6);
            if ("Male".equalsIgnoreCase(gender)) {
                mRadioButton.setSelected(true);
            } else if ("Female".equalsIgnoreCase(gender)) {
                fmRadioButton.setSelected(true);
            } else {
                // Clear selection if gender is neither Male nor Female
                buttonGroup1.clearSelection();
            }

            // Column 7 = Password
            PasswordField.setText(getTableValueAsString(dtm, selectedRow, 7));
            
            // Column 8 = Address
            addressField.setText(getTableValueAsString(dtm, selectedRow, 8));
            
            // Column 9 = Role - set the combo box selection
            String role = getTableValueAsString(dtm, selectedRow, 9);
            roleBox.setSelectedItem(role);
            
        } catch (Exception e) {
            // Handle any unexpected errors during row selection
            JOptionPane.showMessageDialog(this, 
                "Error loading user data: " + e.getMessage(), 
                "Data Loading Error", 
                JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private String getTableValueAsString(DefaultTableModel model, int row, int column) {
        Object value = model.getValueAt(row, column);
        return value != null ? value.toString() : "";
    }

    
    
    
    void showData(){
        usersManager.refreshTable(table);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        namePopupMenu = new javax.swing.JPopupMenu();
        Copy = new javax.swing.JMenuItem();
        Paste = new javax.swing.JMenuItem();
        Cut = new javax.swing.JMenuItem();
        selectall = new javax.swing.JMenuItem();
        usernamePopupMenu = new javax.swing.JPopupMenu();
        Copy1 = new javax.swing.JMenuItem();
        Paste1 = new javax.swing.JMenuItem();
        Cut1 = new javax.swing.JMenuItem();
        selectall1 = new javax.swing.JMenuItem();
        UsersPanel = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        numberField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        emailField = new javax.swing.JTextField();
        PasswordField = new javax.swing.JPasswordField();
        retypePasswordField = new javax.swing.JPasswordField();
        addressField = new javax.swing.JTextField();
        roleBox = new javax.swing.JComboBox<>();
        saveButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        mRadioButton = new javax.swing.JRadioButton();
        fmRadioButton = new javax.swing.JRadioButton();
        jLabel13 = new javax.swing.JLabel();
        usernameField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        DateChooser = new com.toedter.calendar.JDateChooser();

        Copy.setText("Copy");
        Copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyActionPerformed(evt);
            }
        });
        namePopupMenu.add(Copy);

        Paste.setText("Paste");
        Paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasteActionPerformed(evt);
            }
        });
        namePopupMenu.add(Paste);

        Cut.setText("Cut");
        Cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CutActionPerformed(evt);
            }
        });
        namePopupMenu.add(Cut);

        selectall.setText("Select all");
        selectall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectallActionPerformed(evt);
            }
        });
        namePopupMenu.add(selectall);

        Copy1.setText("Copy");
        Copy1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Copy1ActionPerformed(evt);
            }
        });
        usernamePopupMenu.add(Copy1);

        Paste1.setText("Paste");
        Paste1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Paste1ActionPerformed(evt);
            }
        });
        usernamePopupMenu.add(Paste1);

        Cut1.setText("Cut");
        Cut1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Cut1ActionPerformed(evt);
            }
        });
        usernamePopupMenu.add(Cut1);

        selectall1.setText("Select all");
        selectall1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectall1ActionPerformed(evt);
            }
        });
        usernamePopupMenu.add(selectall1);

        setClosable(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        setVisible(true);

        UsersPanel.setBackground(new java.awt.Color(204, 255, 255));
        UsersPanel.setLayout(new java.awt.BorderLayout());

        jPanel7.setBackground(new java.awt.Color(204, 255, 255));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel6.setText("Manage Users");
        jPanel7.add(jLabel6);

        UsersPanel.add(jPanel7, java.awt.BorderLayout.PAGE_START);

        jPanel8.setBackground(new java.awt.Color(204, 255, 255));
        jPanel8.setLayout(new java.awt.GridBagLayout());

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Username", "Birthdate", "Mobile Number", "Email", "Gender", "Password", "Addres", "Role Selection"
            }
        ));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 22;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 311;
        gridBagConstraints.ipady = 324;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        jPanel8.add(jScrollPane1, gridBagConstraints);

        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 52;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 6, 0, 0);
        jPanel8.add(jLabel4, gridBagConstraints);

        nameField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                nameFieldMouseReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 138;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 16);
        jPanel8.add(nameField, gridBagConstraints);

        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Mobile Number");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 6, 0, 0);
        jPanel8.add(jLabel5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 138;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 6, 0, 16);
        jPanel8.add(numberField, gridBagConstraints);

        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Email");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.ipadx = 55;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 6, 0, 0);
        jPanel8.add(jLabel7, gridBagConstraints);

        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("Password");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.ipadx = 32;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 6, 0, 0);
        jPanel8.add(jLabel8, gridBagConstraints);

        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("Re_Password");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.ipadx = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 6, 0, 0);
        jPanel8.add(jLabel9, gridBagConstraints);

        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("Address");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 6, 0, 0);
        jPanel8.add(jLabel10, gridBagConstraints);

        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("Role Selection");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.ipadx = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 6, 0, 0);
        jPanel8.add(jLabel11, gridBagConstraints);

        emailField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 138;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 16);
        jPanel8.add(emailField, gridBagConstraints);

        PasswordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasswordFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 138;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 16);
        jPanel8.add(PasswordField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 138;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 16);
        jPanel8.add(retypePasswordField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 138;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 16);
        jPanel8.add(addressField, gridBagConstraints);

        roleBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a role", "Admin", "User" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 105;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 16);
        jPanel8.add(roleBox, gridBagConstraints);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/warehouse/icons/save.png"))); // NOI18N
        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 18;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 43, 0, 0);
        jPanel8.add(saveButton, gridBagConstraints);

        updateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/warehouse/icons/updateicon.png"))); // NOI18N
        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 14, 0, 0);
        jPanel8.add(updateButton, gridBagConstraints);

        clearButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/warehouse/icons/clearicon.png"))); // NOI18N
        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 21;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 23;
        gridBagConstraints.ipadx = 13;
        gridBagConstraints.ipady = -2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 43, 0, 0);
        jPanel8.add(clearButton, gridBagConstraints);

        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/warehouse/icons/deleteicon.png"))); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 21;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 24;
        gridBagConstraints.ipadx = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 14, 6, 0);
        jPanel8.add(deleteButton, gridBagConstraints);

        jLabel12.setForeground(new java.awt.Color(0, 0, 0));
        jLabel12.setText("Gender");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.ipadx = 45;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 6, 0, 0);
        jPanel8.add(jLabel12, gridBagConstraints);

        mRadioButton.setForeground(new java.awt.Color(0, 0, 0));
        mRadioButton.setText("Male");
        mRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        jPanel8.add(mRadioButton, gridBagConstraints);

        fmRadioButton.setForeground(new java.awt.Color(0, 0, 0));
        fmRadioButton.setText("Female");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        jPanel8.add(fmRadioButton, gridBagConstraints);

        jLabel13.setForeground(new java.awt.Color(0, 0, 0));
        jLabel13.setText("Username");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 6, 0, 0);
        jPanel8.add(jLabel13, gridBagConstraints);

        usernameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 138;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 16);
        jPanel8.add(usernameField, gridBagConstraints);

        jLabel14.setForeground(new java.awt.Color(0, 0, 0));
        jLabel14.setText("Birthdate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 36;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        jPanel8.add(jLabel14, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.ipadx = 120;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 16);
        jPanel8.add(DateChooser, gridBagConstraints);

        UsersPanel.add(jPanel8, java.awt.BorderLayout.CENTER);

        getContentPane().add(UsersPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        
        
    }//GEN-LAST:event_tableMouseClicked

    private void nameFieldMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nameFieldMouseReleased
        if(evt.isPopupTrigger()){
            namePopupMenu.show(this, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_nameFieldMouseReleased

    private void emailFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailFieldActionPerformed

    private void PasswordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasswordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PasswordFieldActionPerformed

    
    
    
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
       // First, collect and validate the user input from form fields
        if (!collectUserInput()) {
            return; // Validation failed, don't proceed with save
        }
        
        // If validation passed, add the user to database
        usersManager.addUser();
        
        // Refresh the table to show the new user
        showData();
        
        // Clear the form for next entry
        Clear();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed

        // Make sure a row is selected for updating
        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, 
                "Please select a row to update!", 
                "No Selection", 
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Get the ID of the selected user so we know which record to update
        DefaultTableModel dtm = (DefaultTableModel) table.getModel();
        String userId = getTableValueAsString(dtm, selectedRow, 0); // Column 0 is ID
        usersManager.setId(userId);
        
        // Collect and validate the updated user input
        if (!collectUserInput()) {
            return; // Validation failed, don't proceed with update
        }
        
        // Perform the database update
        usersManager.updateUser();
        
        // Refresh table to show updated data
        showData();
        
        // Clear the form
        Clear();
    }//GEN-LAST:event_updateButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        Clear();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // Make sure a row is selected for deletion
        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, 
                "Please select a row to delete!", 
                "No Selection", 
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Get the ID of the user to delete
        DefaultTableModel dtm = (DefaultTableModel) table.getModel();
        String userId = getTableValueAsString(dtm, selectedRow, 0); // Column 0 is ID
        usersManager.setId(userId);
        
        // The Users class will handle the confirmation dialog and deletion
        usersManager.deleteUser();
        
        // Refresh table to reflect the deletion
        showData();
        
        // Clear the form
        Clear();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void mRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mRadioButtonActionPerformed

    private void usernameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameFieldActionPerformed

    private void CopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyActionPerformed
        nameField.copy();
    }//GEN-LAST:event_CopyActionPerformed

    private void PasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasteActionPerformed
        nameField.paste();
    }//GEN-LAST:event_PasteActionPerformed

    private void CutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CutActionPerformed
        nameField.cut();
    }//GEN-LAST:event_CutActionPerformed

    private void selectallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectallActionPerformed
        nameField.selectAll();
    }//GEN-LAST:event_selectallActionPerformed

    private void Copy1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Copy1ActionPerformed

    }//GEN-LAST:event_Copy1ActionPerformed

    private void Paste1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Paste1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Paste1ActionPerformed

    private void Cut1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cut1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Cut1ActionPerformed

    private void selectall1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectall1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectall1ActionPerformed

    
    
    private boolean collectUserInput() {
        // Get values from all form fields, trimming whitespace
        String name = nameField.getText().trim();
        String username = usernameField.getText().trim();
        String password = new String(PasswordField.getPassword());
        String retypePassword = new String(retypePasswordField.getPassword());
        String email = emailField.getText().trim();
        String role = roleBox.getSelectedItem().toString();
        Date birthdate = DateChooser.getDate();
        String mobileNumber = numberField.getText().trim();
        String address = addressField.getText().trim();
        String gender = getSelectedGender();

        // Validate that all required fields are filled
        if (name.isEmpty() || username.isEmpty() || password.isEmpty() || retypePassword.isEmpty() ||
            email.isEmpty() || role.equals("Select a role") || birthdate == null ||
            mobileNumber.isEmpty() || gender == null || address.isEmpty()) {
            
            JOptionPane.showMessageDialog(this, 
                "You must fill in all fields", 
                "Incomplete Form", 
                JOptionPane.ERROR_MESSAGE);
            return false;
        }

        // Validate that passwords match
        if (!password.equals(retypePassword)) {
            JOptionPane.showMessageDialog(this, 
                "Passwords do not match", 
                "Password Mismatch", 
                JOptionPane.ERROR_MESSAGE);
            return false;
        }

        // Additional validation can be added here (email format, phone number format, etc.)
        
        // If all validation passes, set the values in the database manager
        usersManager.setName(name);
        usersManager.setUsername(username);
        usersManager.setPassword(password);
        usersManager.setEmail(email);
        usersManager.setRole(role);
        usersManager.setBirthdate(birthdate);
        usersManager.setMobileNumber(mobileNumber);
        usersManager.setAddress(address);
        usersManager.setGender(gender);

        return true; // All validation passed
    }

    private String getSelectedGender() {
        if (mRadioButton.isSelected()) {
            return "Male";
        } else if (fmRadioButton.isSelected()) {
            return "Female";
        }
        return null; // No gender selected
    }
    
    public void Clear(){
        nameField.setText("");
        usernameField.setText("");
        DateChooser.setDate(null);
        numberField.setText("");
        emailField.setText("");
        buttonGroup1.clearSelection();
        PasswordField.setText("");
        retypePasswordField.setText("");
        addressField.setText("");
        roleBox.setSelectedIndex(0);
    }
    
    public void cleanup() {
        if (usersManager != null) {
            usersManager.closeConnection();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Copy;
    private javax.swing.JMenuItem Copy1;
    private javax.swing.JMenuItem Cut;
    private javax.swing.JMenuItem Cut1;
    private com.toedter.calendar.JDateChooser DateChooser;
    private javax.swing.JPasswordField PasswordField;
    private javax.swing.JMenuItem Paste;
    private javax.swing.JMenuItem Paste1;
    private javax.swing.JPanel UsersPanel;
    private javax.swing.JTextField addressField;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField emailField;
    private javax.swing.JRadioButton fmRadioButton;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton mRadioButton;
    private javax.swing.JTextField nameField;
    private javax.swing.JPopupMenu namePopupMenu;
    private javax.swing.JTextField numberField;
    private javax.swing.JPasswordField retypePasswordField;
    private javax.swing.JComboBox<String> roleBox;
    private javax.swing.JButton saveButton;
    private javax.swing.JMenuItem selectall;
    private javax.swing.JMenuItem selectall1;
    private javax.swing.JTable table;
    private javax.swing.JButton updateButton;
    private javax.swing.JTextField usernameField;
    private javax.swing.JPopupMenu usernamePopupMenu;
    // End of variables declaration//GEN-END:variables
}

